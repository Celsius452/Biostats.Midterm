---
title: "Stats.Midterm"
author: "Brandon Thong"
date: "2022-10-29"
output: html_document
---

```{r}
library("dplyr")
library("Hmisc")
library("reshape2")
```

```{r}
#Read in the file for the col data, and count data
mcoldata<-read.csv("E:/Stats.Midterm/Mnemiopsis_col_data.csv",header=TRUE)
mcountdata<-read.csv("E:/Stats.Midterm/Mnemiopsis_count_data.csv",header=TRUE)

#head(mcoldata)
#head(mcountdata)
```

```{r}
#Loop through and create a new column with the mean expression across all experiments

for(i in 1:nrow(mcountdata))
{
  mcountdata$expmean <- ((mcountdata$aboral1)+(mcountdata$aboral2)+(mcountdata$aboral3)+(mcountdata$aboral4)+(mcountdata$oral1)+(mcountdata$oral2)+(mcountdata$oral3)+(mcountdata$oral4))/(8)
}
```

```{r}
#Sort the dataframe by expmean and check the top 5
sortedexpmean<-mcountdata[order(-mcountdata$expmean),]
head(sortedexpmean)
```

Q1. What are the top 5 genes with the highest average expression (across experiments) in the set? What is their function?

- The top 5 genes with the highest average expression across experiments are as follows: ML20395a, ML26358a, ML46651a, ML020045a, and ML00017a.

- Their functions are as follows:
- ML20395a: Elongation factor 1-alpha (translation)
- ML26358a: Actin (major protein constituent of cytoskeleton->microfilaments; also for thin filaments in muscle fibrils)
- ML46651a: Membrane attack complex? (according to Argot2; no other results)
- ML020045a: Tubulin beta chain (second protein component of microtubule)
- ML00017a: Elongation factor 2 (translation)

```{r}
#Create new variables that hold descending values for each column
sortedaboral1<-mcountdata[order(-mcountdata$aboral1),]
sortedaboral1
sortedaboral2<-mcountdata[order(-mcountdata$aboral2),]
sortedaboral2
sortedaboral3<-mcountdata[order(-mcountdata$aboral3),]
sortedaboral3
sortedaboral4<-mcountdata[order(-mcountdata$aboral4),]
sortedaboral4

sortedoral1<-mcountdata[order(-mcountdata$oral1),]
sortedoral1
sortedoral2<-mcountdata[order(-mcountdata$oral2),]
sortedoral2
sortedoral3<-mcountdata[order(-mcountdata$oral3),]
sortedoral3
sortedoral4<-mcountdata[order(-mcountdata$oral4),]
sortedoral4
```

Q2. Are the top 5 genes different if done on a per-column basis?

OG TOP 5 GENES ARE: ML20395a, ML26358a, ML46651a, ML020045a, and ML00017a


(S) = same; (D) = different
- When sorted on a per-column basis, the top 5 genes differ as follows:
- aboral1: ML46651a(S), ML20395a(S), ML020045a(S), ML174731a(D),ML26358a(S)
- aboral2: ML20395a(S),ML46651a(S),ML26358a(S),ML01482a(D),ML034334a(D)
- aboral3: ML20395a(S),ML01482a(D),ML26358a(S),ML46651a(S),ML034334a(D)
- aboral4: ML01482a(D),ML20395a(S),ML034334a(D),ML46651a(S),ML034336a(D)
- oral1: ML20395a(S),ML020045a(S),ML04011a(D),ML26358a(S),ML00017a(S)
- oral2: ML20395a(S),ML020045a(S),ML04011a(D),ML00017a(S),ML26358a(S)
- oral3: ML20395a(S),ML004510a(D),ML26358a(S),ML00017a(S),ML04011a(D)
- oral4: ML20395a(S),ML004510a(D),ML46651a(S),ML020045a(S),ML00017a(S)

-- Yes, the top 5 genes vary depending if it is done on a per-column basis. Many of the original top 5 genes reappear in these newly generated 
"top 5" gene sets, but each column has 1-3 different genes in its "top 5" listing. 

```{r}
#Determine number of rows in the data 
nrow(mcountdata)
```
```{r}
#Calculate mean and standard deviation for each column


#First for aboral1 column
aboral1vec<-mcountdata$aboral1
aboral1mean<-mean(aboral1vec)
aboral1sd<-sd(aboral1vec)
#aboral1mean
#aboral1sd

#Now repeat for the rest
aboral2vec<-mcountdata$aboral2
aboral2mean<-mean(aboral2vec)
aboral2sd<-sd(aboral2vec)
#aboral3
aboral3vec<-mcountdata$aboral3
aboral3mean<-mean(aboral3vec)
aboral3sd<-sd(aboral3vec)
#aboral4
aboral4vec<-mcountdata$aboral4
aboral4mean<-mean(aboral4vec)
aboral4sd<-sd(aboral4vec)
#oral1
oral1vec<-mcountdata$oral1
oral1mean<-mean(oral1vec)
oral1sd<-sd(oral1vec)
#oral2
oral2vec<-mcountdata$oral2
oral2mean<-mean(oral2vec)
oral2sd<-sd(oral2vec)
#oral3
oral3vec<-mcountdata$oral3
oral3mean<-mean(oral3vec)
oral3sd<-sd(oral3vec)
#oral4
oral4vec<-mcountdata$oral4
oral4mean<-mean(oral4vec)
oral4sd<-sd(oral4vec)
```
```{r}
aboral1mean
aboral2mean
aboral3mean
aboral4mean
oral1mean
oral2mean
oral3mean
oral4mean
#testvec<-c(1,3,5,7,9)
#multvec<-testvec*2
#multvec
```

```{r}
#now scale each column such that the mean is equal to the first column 

#Make a copy of this data frame to put scaled values in 
sc.mcountdata<-mcountdata

#Scale all values within each column by the conversion factor determined by the column means calculated earlier
sc.mcountdata$aboral2<-(sc.mcountdata$aboral1)*(524.1/580.5)
sc.mcountdata$aboral3<-(sc.mcountdata$aboral1)*(524.1/581.3)
sc.mcountdata$aboral4<-(sc.mcountdata$aboral1)*(524.1/560.1)
sc.mcountdata$oral1<-(sc.mcountdata$aboral1)*(524.1/551.6)
sc.mcountdata$oral2<-(sc.mcountdata$aboral1)*(524.1/429.0)
sc.mcountdata$oral3<-(sc.mcountdata$aboral1)*(524.1/419.6)
sc.mcountdata$oral4<-(sc.mcountdata$aboral1)*(524.1/457.4)
  
head(sc.mcountdata)
```


```{r}
#Create a correlation matrix for the new data frame
#corr.sc.mcountdata<-cor(sc.mcountdata[2:9],sc.mcountdata[2:9])
#corr.sc.mcountdata

#right now just using the unscaled data
corr.mcountdata<-cor(mcountdata[2:9],mcountdata[2:9])
corr.mcountdata

#unscaled corr 
melt.corr.mcountdata<-melt(corr.mcountdata)
melt.corr.mcountdata
sorted.meltcorr<-melt.corr.mcountdata[order(-melt.corr.mcountdata$value),]
sorted.meltcorr

#remove every other line in the output of sorted.meltcorr to remove the duplicated comparison values. 
#We only really need half of the information because its redundant symmetrical around the self:self correlations
```